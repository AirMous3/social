{"version":3,"sources":["components/common/SuperButton/SuperButton.tsx","components/common/SuperButton/SuperButton.module.css","components/Forms/AddPostOrMessageForm.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["SuperButton","red","className","disabled","restProps","finalClassName","s","button","module","exports","AddPostForm","callBack","classNameTextArea","classNameButton","useForm","mode","register","handleSubmit","setValue","errors","formState","onSubmit","data","message","required","minLength","maxLength","value","placeholder","DialogItem","props","dialog","active","to","id","name","Message","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","messagesElements","messagesData","dialogs","dialogsItems","messages","textArea","sendNewDialogMessage","compose","AuthRedirect","connect","dispatch","text","addNewMessageActionCreator"],"mappings":"yJA4BeA,IAhBqC,SAAC,GAKhD,EAHGC,IAGF,IAHOC,EAGR,EAHQA,UAAWC,EAGnB,EAHmBA,SACbC,EAEN,8CACKC,EAAc,UAAMC,IAAEC,OAAR,YAAkBL,EAAlB,YAA+BC,EAAUG,IAAEH,SAAW,GAAtD,MAEpB,OACI,oCACID,UAAWG,GACPD,M,mBCtBhBI,EAAOC,QAAU,CAAC,OAAS,4BAA4B,SAAW,gC,2GCerDC,EAAc,SAAC,GAA4D,IAAD,EAA1DC,EAA0D,EAA1DA,SAASC,EAAiD,EAAjDA,kBAAkBC,EAA+B,EAA/BA,gBAA+B,EAEfC,YAAkB,CAAEC,KAAM,aAAtFC,EAF2E,EAE3EA,SAAUC,EAFiE,EAEjEA,aAAcC,EAFmD,EAEnDA,SAAuBC,EAF4B,EAEzCC,UAAaD,OAQvD,OACI,uBAAME,SAAUJ,GARsB,SAACK,GACvCX,EAASW,EAAKC,SACdL,EAAS,UAAW,OAMpB,UAEI,kDAAWhB,UAAWU,GAAuBI,EAAS,UAAW,CAC7DQ,UAAU,EAAMC,UAAW,EAAGC,UAAW,CAAEC,MAAO,IAAKJ,QAAS,qBADpE,IAGIK,YAAa,0HACjB,yCACKT,EAAOI,eADZ,aACK,EAAgBA,UAGrB,8BACI,cAAC,IAAD,CAAarB,UAAWW,EAAxB,yB,mBCrChBL,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,yHCcpKoB,MAXf,SAAoBC,GAChB,OAAO,qBAAK5B,UAAWI,IAAEyB,OAAS,IAAMzB,IAAE0B,OAAnC,SACH,eAAC,IAAD,CAASC,GAAI,YAAaH,EAAMI,GAAhC,cAAsCJ,EAAMK,KAA5C,UCcOC,MAjBf,SAAiBN,GAGb,OAAO,8BACH,8BACKA,EAAMP,aCiCJc,MA9Bf,SAAiBP,GAEb,IAAIQ,EAAQR,EAAMS,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAuBT,GAAIS,EAAET,GAAIC,KAAMQ,EAAER,MAAxBQ,EAAET,OAClEU,EAAmBN,EAAMO,aAAaH,KAAI,SAACnB,GAAD,OAAa,cAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQW,OAIjF,OAAQ,sBAAKhC,UAAWI,IAAEwC,QAAlB,UACJ,8BACI,qBAAK5C,UAAWI,IAAEyC,aAAlB,SACKP,MAGT,sBAAKtC,UAAWI,IAAE0C,SAAlB,UAEI,8BAAMJ,IAEN,8BACI,cAAC,IAAD,CAAchC,kBAAmBN,IAAE2C,SAAUtC,SAAUmB,EAAMoB,gCCG9DC,sBAA6BC,IACxCC,aAfoB,SAACf,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACe,GACxB,MAAO,CACHJ,qBAAsB,SAACK,GACnBD,EAASE,YAA2BD,SAMjCJ,CAEbd","file":"static/js/5.e65b201b.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    dissabled?: boolean\r\n\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, disabled,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.button} ${className} ${disabled? s.disabled : ''}  `\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SuperButton_button__2g6wf\",\"disabled\":\"SuperButton_disabled__1H2Ta\"};","import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\n\r\ntype FormType = {\r\n    message: string\r\n}\r\n\r\ntype PropsType = {\r\n    callBack: (text: string) => void\r\n    classNameTextArea?: string\r\n    classNameButton?: string\r\n}\r\n\r\n\r\n\r\nexport const AddPostForm = ({callBack,classNameTextArea,classNameButton}:PropsType) => {\r\n\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm<FormType>({ mode: 'onChange', })\r\n    const onSubmit: SubmitHandler<FormType> = (data) => {\r\n        callBack(data.message)\r\n        setValue(\"message\", \"\")\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <textarea  className={classNameTextArea} {...register('message', {\r\n                required: true, minLength: 1, maxLength: { value: 300, message: 'max length 300' }\r\n            })}\r\n                placeholder={\"Напиши своё сообщение\"} />\r\n            <span>\r\n                {errors.message?.message}\r\n            </span>\r\n\r\n            <div>\r\n                <SuperButton className={classNameButton} >Send</SuperButton>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3VJ1Y\",\"messages\":\"Dialogs_messages__3vd5I\",\"dialogsItems\":\"Dialogs_dialogsItems__OnmqP\",\"active\":\"Dialogs_active__3DmUx\",\"textArea\":\"Dialogs_textArea__gbxIE\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nfunction DialogItem(props: DialogItemPropsType) {\r\n    return <div className={s.dialog + \" \" + s.active}>\r\n        <NavLink to={\"/dialogs/\"+ props.id}> {props.name} </NavLink>\r\n    </div>\r\n}\r\n\r\n type DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport default DialogItem","import React from \"react\";\r\n\r\n\r\nfunction Message(props: MessagePropsType) {\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n\r\n}\r\n\r\n\r\nexport default Message","import React from \"react\";\r\nimport { AddPostForm } from \"../Forms/AddPostOrMessageForm\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport { DialogsPropsType } from \"./DialogsContainer\";\r\nimport Message from \"./Messages/Message\";\r\n\r\n\r\n\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsData.map((d) => <DialogItem key={d.id} id={d.id} name={d.name} />)\r\n    let messagesElements = state.messagesData.map((message) => <Message key={message.id} message={message.message} />)\r\n\r\n\r\n\r\n    return (<div className={s.dialogs}>\r\n        <div>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            <div>{messagesElements}</div>\r\n\r\n            <div>\r\n                <AddPostForm  classNameTextArea={s.textArea} callBack={props.sendNewDialogMessage} />\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {addNewMessageActionCreator, DialogsPageType} from \"../../redux/dialogsReducer\";\r\nimport {AppStoreType} from \"../../redux/reduxStore\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n\r\ntype mapDialogsStateType = {\r\n    dialogsPage: DialogsPageType\r\n\r\n}\r\n\r\ntype mapDialogsDispatchType = {\r\n    sendNewDialogMessage: (text: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapDialogsStateType & mapDialogsDispatchType\r\n\r\nconst mapStateToProps = (state: AppStoreType): mapDialogsStateType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDialogsDispatchType => {\r\n    return {\r\n        sendNewDialogMessage: (text: string) => {\r\n            dispatch(addNewMessageActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(AuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)\r\n\r\n"],"sourceRoot":""}