{"version":3,"sources":["components/Forms/AddPostOrMessageForm.tsx","images/user.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["AddPostForm","callBack","classNameTextArea","classNameButton","useForm","mode","register","handleSubmit","setValue","errors","formState","onSubmit","data","message","className","required","minLength","maxLength","value","placeholder","module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","onBlur","updateStatus","deactivateEditMode","onChange","e","currentTarget","autoFocus","ProfileInfo","profile","updatePhoto","Object","keys","length","Preloader","contact","contacts","s","container","wrapper","alt","image","src","photos","large","userPhoto","text","fullName","vk","website","twitter","mainLink","github","style","padding","target","files","id","marginLeft","display","type","htmlFor","Post","likeCounts","count","setCount","item","avatar","button","onClick","MyPosts","postsElements","profilePage","postData","map","post","textarea","addPost","posts","MyPostsContainer","connect","state","Profile","updateUserStatusThunk","updatePhotoThunk","ProfileContainer","userId","this","match","params","autorizedUserId","toString","getUserProfileThunk","getUsersStatusThunk","history","push","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","AuthRedirect","auth","withRouter"],"mappings":"kLAgBaA,EAAc,SAAC,GAA4D,IAAD,EAA1DC,EAA0D,EAA1DA,SAASC,EAAiD,EAAjDA,kBAAkBC,EAA+B,EAA/BA,gBAA+B,EAEfC,YAAkB,CAAEC,KAAM,aAAtFC,EAF2E,EAE3EA,SAAUC,EAFiE,EAEjEA,aAAcC,EAFmD,EAEnDA,SAAuBC,EAF4B,EAEzCC,UAAaD,OAQvD,OACI,uBAAME,SAAUJ,GARsB,SAACK,GACvCX,EAASW,EAAKC,SACdL,EAAS,UAAW,OAMpB,UAEI,kDAAWM,UAAWZ,GAAuBI,EAAS,UAAW,CAC7DS,UAAU,EAAMC,UAAW,EAAGC,UAAW,CAAEC,MAAO,IAAKL,QAAS,qBADpE,IAGIM,YAAa,0HACjB,yCACKV,EAAOI,eADZ,aACK,EAAgBA,UAGrB,8BACI,cAAC,IAAD,CAAaC,UAAWX,EAAxB,yB,gCCtCD,QAA0B,kC,mBCCzCiB,EAAOC,QAAU,CAAC,UAAY,+BAA+B,QAAU,6BAA6B,MAAQ,2BAA2B,KAAO,4B,mBCA9ID,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,SAAW,4B,mBCAnGD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,KAAO,qB,yLCQpEC,EAAgB,SAACC,GAAsB,IAAD,EAGfC,oBAAkB,GAHH,mBAGxCC,EAHwC,KAG9BC,EAH8B,OAInBF,mBAAiBD,EAAMI,QAJJ,mBAIxCA,EAJwC,KAIhCC,EAJgC,KAK/CC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAcV,OAEI,iCAGSF,GACD,8BACI,uBAAMK,cAnBG,WAChBP,EAAMQ,SAGXL,GAAY,IAeA,oBACYH,EAAMI,YAMtBF,GACA,8BACI,uBAAQO,OAAQ,kBAtBL,SAACL,GACxBJ,EAAMU,aAAaN,GACnBD,GAAY,GAoBsBQ,CAAmBP,IAClCQ,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,cAAcnB,QAAQoB,WAAS,EAACpB,MAAOS,UCWhFY,MA1Cf,YAA8F,IAAxEC,EAAuE,EAAvEA,QAASb,EAA8D,EAA9DA,OAAQM,EAAsD,EAAtDA,aAAcF,EAAwC,EAAxCA,QAASU,EAA+B,EAA/BA,YAC1D,IAAKC,OAAOC,KAAKH,GAASI,OACtB,OAAO,8BACH,cAACC,EAAA,EAAD,MAGR,IAAIC,EAAUN,EAAQO,SAQtB,OAAO,sBAAKjC,UAAWkC,IAAEC,UAAlB,UAEH,sBAAKnC,UAAWkC,IAAEE,QAAlB,UACI,qBAAKC,IAAK,eAAgBrC,UAAWkC,IAAEI,MAAOC,IAAKb,EAAQc,OAAOC,OAASC,MAC3E,sBAAK1C,UAAWkC,IAAES,KAAlB,UACI,cAAC,EAAD,CAAe1B,QAASA,EAASJ,OAAQA,EAAQM,aAAcA,IAC/D,6CAAgBO,EAAQkB,SAAxB,OACA,uCAAUZ,EAAQa,GAAlB,OACA,4CAAeb,EAAQc,WACvB,4CAAed,EAAQe,WACvB,6CAAgBf,EAAQgB,YACxB,2CAAchB,EAAQiB,gBAK1BhC,GACG,sBAAKiC,MAAO,CAACC,QAAS,QAAtB,UACC,uBAAO9B,SAxBM,SAACC,GAClBA,EAAE8B,OAAOC,OACT1B,EAAYL,EAAE8B,OAAOC,MAAM,KAsBYC,GAAI,MAAOJ,MAAO,CAACK,WAAY,OAAQC,QAAS,QAASC,KAAK,SACjG,uBAAQC,QAAQ,MAAhB,kC,0CChBDC,MApBf,SAAclD,GAAuB,IAAD,EAERC,mBAASD,EAAMmD,YAFP,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAIhC,OAEI,sBAAK9D,UAAWkC,IAAE6B,KAAlB,UACI,qBAAK1B,IAAK,YAAaE,IAAK9B,EAAMuD,SAElC,qBAAKhE,UAAWkC,IAAES,KAAlB,SAA0BlC,EAAMV,UAEhC,8BACI,yBAAQC,UAAWkC,IAAE+B,OAAQC,QAAS,kBAAMJ,EAASD,EAAQ,IAA7D,cAAmEA,EAAnE,kBCMDM,MArBf,SAAiB1D,GAEb,IAEI2D,EAFQ3D,EAAM4D,YAEQC,SAASC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAoBzE,QAASyE,EAAKA,KAC7EZ,WAAYY,EAAKZ,WAAYI,OAAQQ,EAAKR,QADYQ,EAAKlB,OAI/D,OACI,sBAAKtD,UAAWkC,IAAEC,UAAlB,UACI,4CACA,8BACI,cAAC,IAAD,CAAa/C,kBAAmB8C,IAAEuC,SAAUtF,SAAUsB,EAAMiE,YAEhE,qBAAK1E,UAAWkC,IAAEyC,MAAlB,SACKP,QCEJQ,EAAmBC,aAPR,SAACC,GACrB,MAAO,CACHT,YAAaS,EAAMT,eAK8B,CAAEK,aAA3BG,CAAsCV,GCHvDY,MAXf,YAAwG,IAAtFrD,EAAqF,EAArFA,QAASb,EAA4E,EAA5EA,OAAQmE,EAAoE,EAApEA,sBAAuB/D,EAA6C,EAA7CA,QAAQgE,EAAqC,EAArCA,iBAE9D,OAAO,gCACH,cAAC,EAAD,CAAatD,YAAasD,EAAmBhE,QAASA,EAASS,QAASA,EAASb,OAAQA,EAAQM,aAAc6D,IAC/G,cAACJ,EAAD,QCqBFM,E,+JAEF,c,4BAIA,WACI,IAE0C,IAFtCC,EAASC,KAAK3E,MAAM4E,MAAMC,OAAOH,OAEjCA,GAAUC,KAAK3E,MAAM8E,iBAErBJ,EAAM,UAAGA,SAAH,kBAAaC,KAAK3E,MAAM8E,uBAAxB,aAAa,EAA4BC,WAE/CJ,KAAK3E,MAAMgF,oBAAoBN,GAC/BC,KAAK3E,MAAMiF,oBAAoBP,IAG/BC,KAAK3E,MAAMkF,QAAQC,KAAK,Y,+BAIhC,WACIR,KAAKS,mB,gCAGT,SAAmBC,EAAgCC,EAAyBC,GACpEZ,KAAK3E,MAAM4E,MAAMC,OAAOH,SAAWW,EAAUT,MAAMC,OAAOH,QAC9DC,KAAKS,mB,oBAGT,WAEI,OACI,cAAC,EAAD,aAAS5E,SAAUmE,KAAK3E,MAAM4E,MAAMC,OAAOH,QAAYC,KAAK3E,Y,GAjCzCwF,IAAMC,WA6CtBC,sBAA6BC,IACxCvB,aARkB,SAACC,GAAD,MAA+C,CACjEpD,QAASoD,EAAMT,YAAY3C,QAC3Bb,OAAQiE,EAAMT,YAAYxD,OAC1B0E,gBAAiBT,EAAMuB,KAAKvG,KAAKwD,MAKR,CAACmC,wBAAqBC,wBAAqBV,0BAAuBC,uBAC3FqB,IAFWH,CAGbjB","file":"static/js/3.e63a4686.chunk.js","sourcesContent":["import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\n\r\ntype FormType = {\r\n    message: string\r\n}\r\n\r\ntype PropsType = {\r\n    callBack: (text: string) => void\r\n    classNameTextArea?: string\r\n    classNameButton?: string\r\n}\r\n\r\n\r\n\r\nexport const AddPostForm = ({callBack,classNameTextArea,classNameButton}:PropsType) => {\r\n\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm<FormType>({ mode: 'onChange', })\r\n    const onSubmit: SubmitHandler<FormType> = (data) => {\r\n        callBack(data.message)\r\n        setValue(\"message\", \"\")\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <textarea  className={classNameTextArea} {...register('message', {\r\n                required: true, minLength: 1, maxLength: { value: 300, message: 'max length 300' }\r\n            })}\r\n                placeholder={\"Напиши своё сообщение\"} />\r\n            <span>\r\n                {errors.message?.message}\r\n            </span>\r\n\r\n            <div>\r\n                <SuperButton className={classNameButton} >Send</SuperButton>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.40a377fa.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__2bEaS\",\"wrapper\":\"ProfileInfo_wrapper__2_Vkz\",\"image\":\"ProfileInfo_image__iqC1n\",\"text\":\"ProfileInfo_text__3MgiE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyPosts_container__2mCmv\",\"posts\":\"MyPosts_posts__16xq0\",\"textarea\":\"MyPosts_textarea__3S7kx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__yqMLX\",\"button\":\"Post_button__1WEtI\",\"text\":\"Post_text__1OgWd\"};","import React, {useEffect, useState} from 'react'\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatus = (props: PropsType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState<Boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) // сетаем значение в локал стейт\r\n\r\n    const activateEditmode = () => {\r\n        if (!props.isOwner) {\r\n            return\r\n        }\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = (status: string) => {\r\n        props.updateStatus(status)\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditmode}>\r\n                        status:{props.status}\r\n                    </span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input  onBlur={() => deactivateEditMode(status)}\r\n                           onChange={(e) => setStatus(e.currentTarget.value)} autoFocus value={status}/>\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"./../../../images/user.png\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhoto: (photo: string) => void\r\n\r\n}\r\n\r\nfunction ProfileInfo({profile, status, updateStatus, isOwner, updatePhoto}: ProfileInfoType) {\r\n    if (!Object.keys(profile).length) {\r\n        return <div>\r\n            <Preloader/>\r\n        </div>\r\n    }\r\n    let contact = profile.contacts\r\n\r\n    const savePhotoHandler = (e: any) => {\r\n        if (e.target.files) {\r\n            updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return <div className={s.container}>\r\n\r\n        <div className={s.wrapper}>\r\n            <img alt={'profileImage'} className={s.image} src={profile.photos.large || userPhoto}/>\r\n            <div className={s.text}>\r\n                <ProfileStatus isOwner={isOwner} status={status} updateStatus={updateStatus}/>\r\n                <div>fullName: {profile.fullName} </div>\r\n                <div>vk: {contact.vk} </div>\r\n                <div>website: {contact.website}</div>\r\n                <div>twitter: {contact.twitter}</div>\r\n                <div>mainLink: {contact.mainLink}</div>\r\n                <div>github: {contact.github}</div>\r\n            </div>\r\n\r\n        </div>\r\n        {\r\n            isOwner\r\n            && <div style={{padding: '10px'}}>\r\n                <input onChange={savePhotoHandler} id={'img'} style={{marginLeft: '50px', display: 'none'}} type=\"file\"/>\r\n                <label  htmlFor='img'> update photo</label>\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React, { useState } from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\n\r\n\r\ntype PropsPostType = {\r\n    message: string\r\n    avatar: string\r\n    likeCounts: number\r\n\r\n}\r\n\r\n\r\nfunction Post(props: PropsPostType) {\r\n\r\n    let [count, setCount] = useState(props.likeCounts)\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img alt={'postImage'} src={props.avatar} />\r\n\r\n            <div className={s.text} >{props.message}</div>\r\n\r\n            <div>\r\n                <button className={s.button} onClick={() => setCount(count + 1)}> {count} like </button>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport { AddPostForm } from \"../../Forms/AddPostOrMessageForm\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport { MyPostsPropsType } from \"./MyPostsContainer\";\r\nimport Post from \"./Post/Post\";\r\n\r\n\r\n\r\n\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n\r\n    let state = props.profilePage\r\n\r\n    let postsElements = state.postData.map(post => <Post key={post.id} message={post.post}\r\n        likeCounts={post.likeCounts} avatar={post.avatar} />)\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <h3> My Posts </h3>\r\n            <div>\r\n                <AddPostForm classNameTextArea={s.textarea} callBack={props.addPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import { connect } from \"react-redux\";\r\nimport { addPost, PostDataType } from \"../../../redux/profileReducer\";\r\nimport { AppStoreType } from \"../../../redux/reduxStore\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype mapStateType = {\r\n    profilePage: MyPostsType\r\n}\r\n\r\ntype MyPostsType = {\r\n    postData: Array<PostDataType>\r\n}\r\n\r\n\r\ntype mapDispatchType = {\r\n    addPost: (text: string) => void\r\n}\r\nexport type MyPostsPropsType = mapStateType & mapDispatchType\r\n\r\nconst mapStateToProps = (state: AppStoreType): mapStateType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts)\r\n\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType, updatePhotoThunk} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhotoThunk: (photo: string) => void\r\n}\r\n\r\nfunction Profile({profile, status, updateUserStatusThunk, isOwner,updatePhotoThunk}: ProfilePropsType) {\r\n\r\n    return <div>\r\n        <ProfileInfo updatePhoto={updatePhotoThunk}  isOwner={isOwner} profile={profile} status={status} updateStatus={updateUserStatusThunk}/>\r\n        <MyPostsContainer/>\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default Profile","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {\r\n    getUserProfileThunk,\r\n    getUsersStatusThunk,\r\n    ProfileType,\r\n    updatePhotoThunk,\r\n    updateUserStatusThunk\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStoreType} from \"../../redux/reduxStore\";\r\nimport Profile from \"./Profile\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string,\r\n    autorizedUserId: number | null\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunk: (userId: string) => void\r\n    getUsersStatusThunk: (userId: string) => void\r\n    updateUserStatusThunk: (status: string) => void\r\n    updatePhotoThunk: (photo: string) => void\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\ntype ProfileContainerType = mapStateToPropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    savePhoto(){\r\n\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (userId || this.props.autorizedUserId) {\r\n\r\n            userId = userId ?? this.props.autorizedUserId?.toString()\r\n\r\n            this.props.getUserProfileThunk(userId)\r\n            this.props.getUsersStatusThunk(userId)\r\n\r\n        } else {\r\n            this.props.history.push('/login')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile isOwner={!this.props.match.params.userId} {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStoreType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.data.id,\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(AuthRedirect,\r\n    connect(mapStateToProps, {getUserProfileThunk, getUsersStatusThunk, updateUserStatusThunk, updatePhotoThunk}),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}