{"version":3,"sources":["components/common/SuperButton/SuperButton.tsx","components/common/SuperButton/SuperButton.module.css","components/Forms/AddPostOrMessageForm.tsx","images/user.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["SuperButton","red","className","disabled","restProps","finalClassName","s","button","module","exports","AddPostForm","callBack","classNameTextArea","classNameButton","useForm","mode","register","handleSubmit","setValue","errors","formState","onSubmit","data","message","required","minLength","maxLength","value","placeholder","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","deactivateEditMode","onChange","e","currentTarget","autoFocus","ProfileInfo","Object","keys","profile","length","Preloader","contact","contacts","container","alt","image","src","photos","large","userPhoto","text","fullName","vk","website","twitter","mainLink","github","Post","likeCounts","count","setCount","item","avatar","onClick","MyPosts","postsElements","profilePage","postData","map","post","id","textarea","addPost","posts","MyPostsContainer","connect","state","Profile","updateUserStatusThunk","ProfileContainer","userId","this","match","params","autorizedUserId","toString","getUserProfileThunk","getUsersStatusThunk","history","push","React","Component","compose","AuthRedirect","auth","withRouter"],"mappings":"yJA4BeA,IAhBqC,SAAC,GAKhD,EAHGC,IAGF,IAHOC,EAGR,EAHQA,UAAWC,EAGnB,EAHmBA,SACbC,EAEN,8CACKC,EAAc,UAAMC,IAAEC,OAAR,YAAkBL,EAAlB,YAA+BC,EAAUG,IAAEH,SAAW,GAAtD,MAEpB,OACI,oCACID,UAAWG,GACPD,M,mBCtBhBI,EAAOC,QAAU,CAAC,OAAS,4BAA4B,SAAW,gC,2GCerDC,EAAc,SAAC,GAA4D,IAAD,EAA1DC,EAA0D,EAA1DA,SAASC,EAAiD,EAAjDA,kBAAkBC,EAA+B,EAA/BA,gBAA+B,EAEfC,YAAkB,CAAEC,KAAM,aAAtFC,EAF2E,EAE3EA,SAAUC,EAFiE,EAEjEA,aAAcC,EAFmD,EAEnDA,SAAuBC,EAF4B,EAEzCC,UAAaD,OAQvD,OACI,uBAAME,SAAUJ,GARsB,SAACK,GACvCX,EAASW,EAAKC,SACdL,EAAS,UAAW,OAMpB,UAEI,kDAAWhB,UAAWU,GAAuBI,EAAS,UAAW,CAC7DQ,UAAU,EAAMC,UAAW,EAAGC,UAAW,CAAEC,MAAO,IAAKJ,QAAS,qBADpE,IAGIK,YAAa,0HACjB,yCACKT,EAAOI,eADZ,aACK,EAAgBA,UAGrB,8BACI,cAAC,IAAD,CAAarB,UAAWW,EAAxB,yB,gCCtCD,QAA0B,kC,mBCCzCL,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,2BAA2B,KAAO,4B,mBCAvGD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,uBAAuB,SAAW,4B,mBCAnGD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,OAAS,qBAAqB,KAAO,qB,yLCOpEoB,EAAgB,SAACC,GAAsB,IAAD,EAGfC,oBAAkB,GAHH,mBAGxCC,EAHwC,KAG9BC,EAH8B,OAInBF,mBAAiBD,EAAMI,QAJJ,mBAIxCA,EAJwC,KAIhCC,EAJgC,KAK/CC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SASV,OAEI,iCAGSF,GACD,8BACI,uBAAMK,cAdG,kBAAMJ,GAAY,IAc3B,oBACYH,EAAMI,YAMtBF,GACA,8BACI,uBAAOM,OAAQ,kBAtBJ,SAACJ,GACxBJ,EAAMS,aAAaL,GACnBD,GAAY,GAoBqBO,CAAmBN,IAASO,SAAU,SAACC,GAAD,OAAOP,EAAUO,EAAEC,cAAchB,QAAQiB,WAAS,EAACjB,MAAOO,UCD1HW,MA1Bf,SAAqBf,GACjB,IAAKgB,OAAOC,KAAKjB,EAAMkB,SAASC,OAC5B,OAAO,8BACH,cAACC,EAAA,EAAD,MAGR,IAAIC,EAAUrB,EAAMkB,QAAQI,SAC5B,OAAO,sBAAKlD,UAAWI,IAAE+C,UAAlB,UAEH,qBAAKC,IAAK,eAAgBpD,UAAWI,IAAEiD,MAAOC,IAAoC,OAA/B1B,EAAMkB,QAAQS,OAAOC,MAAiBC,IAAY7B,EAAMkB,QAAQS,OAAOC,QAC1H,sBAAKxD,UAAWI,IAAEsD,KAAlB,UACI,cAAC,EAAD,CAAe1B,OAAQJ,EAAMI,OAAQK,aAAcT,EAAMS,eACzD,6CAAgBT,EAAMkB,QAAQa,SAA9B,OACA,uCAAUV,EAAQW,GAAlB,OACA,4CAAeX,EAAQY,WACvB,4CAAeZ,EAAQa,WACvB,6CAAgBb,EAAQc,YACxB,2CAAcd,EAAQe,iB,0CCGnBC,MApBf,SAAcrC,GAAuB,IAAD,EAERC,mBAASD,EAAMsC,YAFP,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAIhC,OAEI,sBAAKpE,UAAWI,IAAEiE,KAAlB,UACI,qBAAKjB,IAAK,YAAaE,IAAK1B,EAAM0C,SAElC,qBAAKtE,UAAWI,IAAEsD,KAAlB,SAA0B9B,EAAMP,UAEhC,8BACI,yBAAQrB,UAAWI,IAAEC,OAAQkE,QAAS,kBAAMH,EAASD,EAAQ,IAA7D,cAAmEA,EAAnE,kBCMDK,MArBf,SAAiB5C,GAEb,IAEI6C,EAFQ7C,EAAM8C,YAEQC,SAASC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAoBxD,QAASwD,EAAKA,KAC7EX,WAAYW,EAAKX,WAAYI,OAAQO,EAAKP,QADYO,EAAKC,OAI/D,OACI,sBAAK9E,UAAWI,IAAE+C,UAAlB,UACI,4CACA,8BACI,cAAC,IAAD,CAAazC,kBAAmBN,IAAE2E,SAAUtE,SAAUmB,EAAMoD,YAEhE,qBAAKhF,UAAWI,IAAE6E,MAAlB,SACKR,QCEJS,EAAmBC,aAPR,SAACC,GACrB,MAAO,CACHV,YAAaU,EAAMV,eAK8B,CAAEM,aAA3BG,CAAsCX,GCLvDa,MAXf,SAAiBzD,GAEb,OAAO,gCACH,cAAC,EAAD,CAAakB,QAASlB,EAAMkB,QAASd,OAAQJ,EAAMI,OAAQK,aAAcT,EAAM0D,wBAC/E,cAACJ,EAAD,QCgBFK,E,uKAEF,WACI,IAE0C,IAFtCC,EAASC,KAAK7D,MAAM8D,MAAMC,OAAOH,OAEjCA,GAAUC,KAAK7D,MAAMgE,iBAErBJ,EAAM,UAAGA,SAAH,kBAAaC,KAAK7D,MAAMgE,uBAAxB,aAAa,EAA4BC,WAE/CJ,KAAK7D,MAAMkE,oBAAoBN,GAC/BC,KAAK7D,MAAMmE,oBAAoBP,IAG/BC,KAAK7D,MAAMoE,QAAQC,KAAK,Y,oBAKhC,WAEI,OACI,cAAC,EAAD,eAAaR,KAAK7D,Y,GArBCsE,IAAMC,WAiCtBC,sBAA6BC,IACxClB,aARkB,SAACC,GAAD,MAA+C,CACjEtC,QAASsC,EAAMV,YAAY5B,QAC3Bd,OAAQoD,EAAMV,YAAY1C,OAC1B4D,gBAAiBR,EAAMkB,KAAKlF,KAAK0D,MAKR,CAAEgB,wBAAqBC,wBAAqBT,4BACrEiB,IAFWH,CAGbb","file":"static/js/3.bdb8a696.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    dissabled?: boolean\r\n\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, disabled,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.button} ${className} ${disabled? s.disabled : ''}  `\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SuperButton_button__2g6wf\",\"disabled\":\"SuperButton_disabled__1H2Ta\"};","import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\nimport SuperButton from \"../common/SuperButton/SuperButton\";\r\n\r\ntype FormType = {\r\n    message: string\r\n}\r\n\r\ntype PropsType = {\r\n    callBack: (text: string) => void\r\n    classNameTextArea?: string\r\n    classNameButton?: string\r\n}\r\n\r\n\r\n\r\nexport const AddPostForm = ({callBack,classNameTextArea,classNameButton}:PropsType) => {\r\n\r\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm<FormType>({ mode: 'onChange', })\r\n    const onSubmit: SubmitHandler<FormType> = (data) => {\r\n        callBack(data.message)\r\n        setValue(\"message\", \"\")\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <textarea  className={classNameTextArea} {...register('message', {\r\n                required: true, minLength: 1, maxLength: { value: 300, message: 'max length 300' }\r\n            })}\r\n                placeholder={\"Напиши своё сообщение\"} />\r\n            <span>\r\n                {errors.message?.message}\r\n            </span>\r\n\r\n            <div>\r\n                <SuperButton className={classNameButton} >Send</SuperButton>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.40a377fa.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__2bEaS\",\"image\":\"ProfileInfo_image__iqC1n\",\"text\":\"ProfileInfo_text__3MgiE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyPosts_container__2mCmv\",\"posts\":\"MyPosts_posts__16xq0\",\"textarea\":\"MyPosts_textarea__3S7kx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__yqMLX\",\"button\":\"Post_button__1WEtI\",\"text\":\"Post_text__1OgWd\"};","import React, { useEffect, useState } from 'react'\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: PropsType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState<Boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) // сетаем значение в локал стейт \r\n\r\n    const activateEditmode = () => setEditMode(true)\r\n    const deactivateEditMode = (status: string) => {\r\n        props.updateStatus(status)\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditmode} >\r\n                        status:{props.status}\r\n                    </span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input onBlur={() => deactivateEditMode(status)} onChange={(e) => setStatus(e.currentTarget.value)} autoFocus value={status} />\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { ProfileType } from \"../../../redux/profileReducer\";\r\nimport { Preloader } from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"./../../../images/user.png\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { ProfileStatus } from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoType) {\r\n    if (!Object.keys(props.profile).length) {\r\n        return <div>\r\n            <Preloader />\r\n        </div>\r\n    }\r\n    let contact = props.profile.contacts\r\n    return <div className={s.container}>\r\n\r\n        <img alt={'profileImage'} className={s.image} src={props.profile.photos.large === null ? userPhoto : props.profile.photos.large} />\r\n        <div className={s.text}>\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n            <div>fullName: {props.profile.fullName} </div>\r\n            <div>vk: {contact.vk} </div>\r\n            <div>website: {contact.website}</div>\r\n            <div>twitter: {contact.twitter}</div>\r\n            <div>mainLink: {contact.mainLink}</div>\r\n            <div>github: {contact.github}</div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React, { useState } from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\n\r\n\r\ntype PropsPostType = {\r\n    message: string\r\n    avatar: string\r\n    likeCounts: number\r\n\r\n}\r\n\r\n\r\nfunction Post(props: PropsPostType) {\r\n\r\n    let [count, setCount] = useState(props.likeCounts)\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img alt={'postImage'} src={props.avatar} />\r\n\r\n            <div className={s.text} >{props.message}</div>\r\n\r\n            <div>\r\n                <button className={s.button} onClick={() => setCount(count + 1)}> {count} like </button>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport { AddPostForm } from \"../../Forms/AddPostOrMessageForm\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport { MyPostsPropsType } from \"./MyPostsContainer\";\r\nimport Post from \"./Post/Post\";\r\n\r\n\r\n\r\n\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n\r\n    let state = props.profilePage\r\n\r\n    let postsElements = state.postData.map(post => <Post key={post.id} message={post.post}\r\n        likeCounts={post.likeCounts} avatar={post.avatar} />)\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <h3> My Posts </h3>\r\n            <div>\r\n                <AddPostForm classNameTextArea={s.textarea} callBack={props.addPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import { connect } from \"react-redux\";\r\nimport { addPost, PostDataType } from \"../../../redux/profileReducer\";\r\nimport { AppStoreType } from \"../../../redux/reduxStore\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\ntype mapStateType = {\r\n    profilePage: MyPostsType\r\n}\r\n\r\ntype MyPostsType = {\r\n    postData: Array<PostDataType>\r\n}\r\n\r\n\r\ntype mapDispatchType = {\r\n    addPost: (text: string) => void\r\n}\r\nexport type MyPostsPropsType = mapStateType & mapDispatchType\r\n\r\nconst mapStateToProps = (state: AppStoreType): mapStateType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts)\r\n\r\n\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { MyPostsContainer } from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileType } from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatusThunk: (status: string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateUserStatusThunk} />\r\n        <MyPostsContainer />\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default Profile","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { AuthRedirect } from \"../../hoc/AuthRedirect\";\r\nimport { getUserProfileThunk, getUsersStatusThunk, ProfileType, updateUserStatusThunk } from \"../../redux/profileReducer\";\r\nimport { AppStoreType } from \"../../redux/reduxStore\";\r\nimport Profile from \"./Profile\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string,\r\n    autorizedUserId: number | null\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunk: (userId: string) => void\r\n    getUsersStatusThunk: (userId: string) => void\r\n    updateUserStatusThunk: (status: string) => void\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\ntype ProfileContainerType = mapStateToPropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (userId || this.props.autorizedUserId) {\r\n\r\n            userId = userId ?? this.props.autorizedUserId?.toString()\r\n\r\n            this.props.getUserProfileThunk(userId)\r\n            this.props.getUsersStatusThunk(userId)\r\n        \r\n        } else {\r\n            this.props.history.push('/login')\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStoreType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.data.id,\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(AuthRedirect,\r\n    connect(mapStateToProps, { getUserProfileThunk, getUsersStatusThunk, updateUserStatusThunk }),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}